diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/deepracer_systems_scripts_module/deepracer_systems_scripts_node.py b/deepracer_systems_pkg/deepracer_systems_pkg/deepracer_systems_scripts_module/deepracer_systems_scripts_node.py
index d0c7722..910d3f8 100755
--- a/deepracer_systems_pkg/deepracer_systems_pkg/deepracer_systems_scripts_module/deepracer_systems_scripts_node.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/deepracer_systems_scripts_module/deepracer_systems_scripts_node.py
@@ -46,6 +46,16 @@ class DeepracerSystemsScriptsNode(Node):
 
         self.uvc_logs_suppressed = False
 
+    def __enter__(self):
+        """Called when the node object is created using the 'with' statement.
+        """
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        """Called when the object is destroyed.
+        """
+        pass
+
     def run_dependencies(self):
         """Timer callback which runs the dependency scripts if not run previously.
         """
@@ -121,15 +131,23 @@ class DeepracerSystemsScriptsNode(Node):
 
 
 def main(args=None):
-    rclpy.init(args=args)
-    deepracer_systems_script_node = DeepracerSystemsScriptsNode()
-    executor = MultiThreadedExecutor()
-    rclpy.spin(deepracer_systems_script_node, executor)
-    # Destroy the node explicitly
-    # (optional - otherwise it will be done automatically
-    # when the garbage collector destroys the node object)
-    deepracer_systems_script_node.destroy_node()
-    rclpy.shutdown()
+
+    try:
+        rclpy.init(args=args)
+        deepracer_systems_script_node = DeepracerSystemsScriptsNode()
+        executor = MultiThreadedExecutor()
+        rclpy.spin(deepracer_systems_script_node, executor)
+        # Destroy the node explicitly
+        # (optional - otherwise it will be done automatically
+        # when the garbage collector destroys the node object)
+        deepracer_systems_script_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
 
 
 if __name__ == "__main__":
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/model_loader_module/model_loader_node.py b/deepracer_systems_pkg/deepracer_systems_pkg/model_loader_module/model_loader_node.py
index 5ac27af..a40cc76 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/model_loader_module/model_loader_node.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/model_loader_module/model_loader_node.py
@@ -181,6 +181,15 @@ class ModelLoaderNode(Node):
 
         self.get_logger().info("Model Loader node successfully created")
 
+    def __enter__(self):
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        """Called when the object is destroyed.
+        """
+        self.destroy_timer(self.timer)
+        self.scheduler.schedule_exit()
+
     def timer_callback(self):
         """Heartbeat function to keep the node alive.
         """
@@ -722,15 +731,20 @@ class ModelLoaderNode(Node):
 
 
 def main(args=None):
-    rclpy.init(args=args)
-    model_loader_node = ModelLoaderNode()
-    executor = MultiThreadedExecutor()
-    rclpy.spin(model_loader_node, executor)
-    # Destroy the node explicitly
-    # (optional - otherwise it will be done automatically
-    # when the garbage collector destroys the node object)
-    model_loader_node.destroy_node()
-    rclpy.shutdown()
+    try:
+        rclpy.init(args=args)
+        with ModelLoaderNode() as model_loader_node:
+            executor = MultiThreadedExecutor()
+            rclpy.spin(model_loader_node, executor)
+            model_loader_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
+
 
 
 if __name__ == "__main__":
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_config.py b/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_config.py
index c4ff558..76f73a3 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_config.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_config.py
@@ -56,7 +56,7 @@ WIFI_CONFIG_DEFAULTS = {
 DEVICE_STATUS_NAME = "device-status.txt"
 
 # Set to True to set hostname to the chassis serial number.
-SET_HOSTNAME_TO_CHASSIS_SERIAL_NUMBER = True
+SET_HOSTNAME_TO_CHASSIS_SERIAL_NUMBER = False
 CHASSIS_SERIAL = os.path.join(os.sep, "sys", "class", "dmi", "id", "chassis_serial")
 
 SCHEDULE_CONFIG_UPDATE_CB = "schedule_config_update"
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_monitor_node.py b/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_monitor_node.py
index 587afeb..c4c48fa 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_monitor_node.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_monitor_node.py
@@ -200,6 +200,17 @@ class NetworkMonitorNode(Node):
         self.led_solid_request.hold = 0.0
         self.led_solid_service.call_async(self.led_solid_request)
 
+        self.destroy_timer(self.timer)
+        self.destroy_timer(self.status_publisher_timer)
+
+        if network_config.ENABLE_NETWORK_LED_UPDATE:
+            self.destroy_timer(self.update_status_LED_timer)
+
+        if network_config.ENABLE_REPORT_STATE_UPDATE:
+            self.destroy_timer(self.report_state_timer)
+
+        self.scheduler.schedule_exit()
+
     def usb_file_system_notification_cb(self, notification_msg):
         """Callback for messages triggered whenever usb_monitor_node identifies a file/folder
            thats being tracked.
@@ -492,15 +503,20 @@ class NetworkMonitorNode(Node):
 
 
 def main(args=None):
-    rclpy.init(args=args)
-    with NetworkMonitorNode() as network_monitor_node:
-        executor = MultiThreadedExecutor()
-        rclpy.spin(network_monitor_node, executor)
-        # Destroy the node explicitly
-        # (optional - otherwise it will be done automatically
-        # when the garbage collector destroys the node object)
-        network_monitor_node.destroy_node()
-    rclpy.shutdown()
+
+    try:
+        rclpy.init(args=args)
+        with NetworkMonitorNode() as network_monitor_node:
+            executor = MultiThreadedExecutor()
+            rclpy.spin(network_monitor_node, executor)
+            network_monitor_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
 
 
 if __name__ == "__main__":
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py b/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py
index d1a6ff0..d69acbd 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py
@@ -57,7 +57,7 @@ def get_chassis_serial():
     """
     serial = file_system_utils.read_line(network_config.CHASSIS_SERIAL).strip()
     if serial == "":
-        serial = software_update_config.PACKAGE_MASK.strip()
+        serial = software_update_config.VERSION_MASK.strip()
 
     serial = serial.lower()
     serial = serial.replace(" ", "-")
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py b/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py
index dd6670d..06d862c 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py
@@ -24,7 +24,7 @@ GET_OTG_LINK_STATE_SERVICE_NAME = "get_otg_link_state"
 #########################################################################################
 # OTG settings.
 
-ENABLE_OTG_PERIODIC_CHECK = True
+ENABLE_OTG_PERIODIC_CHECK = False
 OTG_CHECK_PERIOD_IN_SECONDS = 2
 
 OTG_STATE_DIRECTORY = os.path.join(os.sep, "sys", "kernel", "debug", "dwc3.0.auto")
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py b/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py
index 3235515..481e4e5 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py
@@ -124,9 +124,12 @@ class OTGControlNode(Node):
     def __exit__(self, exc_type, exc_value, traceback):
         """Called when the object is destroyed.
         """
+        self.destroy_timer(self.timer)
+        self.scheduler.schedule_exit()
+
         if otg_config.ENABLE_OTG_PERIODIC_CHECK:
             self.disable_otg()
-            self.otg_check_timer.__exit__(exc_type, exc_value, traceback)
+            self.destroy_timer(self.otg_check_timer)
 
     def check_otg_connection(self):
         """Wrapper function to schedule the otg_connection_change function whenver
@@ -231,14 +234,18 @@ class OTGControlNode(Node):
 
 
 def main(args=None):
-    rclpy.init(args=args)
-    with OTGControlNode() as otg_control_node:
-        rclpy.spin(otg_control_node)
-        # Destroy the node explicitly
-        # (optional - otherwise it will be done automatically
-        # when the garbage collector destroys the node object)
-        otg_control_node.destroy_node()
-    rclpy.shutdown()
+    try:
+        rclpy.init(args=args)
+        with OTGControlNode() as otg_control_node:
+            rclpy.spin(otg_control_node)
+            otg_control_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
 
 
 if __name__ == "__main__":
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_config.py b/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_config.py
index e9bb427..ac52ea0 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_config.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_config.py
@@ -30,7 +30,7 @@ NETWORK_CONNECTION_STATUS_TOPIC_NAME = \
 #########################################################################################
 # Software Update manager configuration.
 
-ENABLE_PERIODIC_SOFTWARE_UPDATE = True
+ENABLE_PERIODIC_SOFTWARE_UPDATE = False
 SOFTWARE_UPDATE_PERIOD_IN_SECONDS = (60.0 * 15)
 MIN_TIME_BEFORE_REBOOT_IN_SECONDS = 10
 SOFTWARE_UPDATE_RETRY_SLEEP_IN_SECONDS = (30.0 * 15)
diff --git a/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_node.py b/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_node.py
index 7727458..4f0588c 100644
--- a/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_node.py
+++ b/deepracer_systems_pkg/deepracer_systems_pkg/software_update_module/software_update_node.py
@@ -245,6 +245,18 @@ class SoftwareUpdateNode(Node):
 
         self.get_logger().info("Software Update node successfully created")
 
+    def __enter__(self):
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        """Called when the object is destroyed.
+        """
+        self.destroy_timer(self.timer)
+        self.scheduler.schedule_exit()
+
+        if software_update_config.ENABLE_PERIODIC_SOFTWARE_UPDATE:
+            self.destroy_timer(self.update_check_timer)
+
     def timer_callback(self):
         """Heartbeat function to keep the node alive.
         """
@@ -760,16 +772,20 @@ class SoftwareUpdateNode(Node):
         self.software_update_pct_publisher.publish(pct_obj)
 
 
-def main(args=None):
-    rclpy.init(args=args)
-    software_update_node = SoftwareUpdateNode()
-    executor = MultiThreadedExecutor()
-    rclpy.spin(software_update_node, executor)
-    # Destroy the node explicitly
-    # (optional - otherwise it will be done automatically
-    # when the garbage collector destroys the node object)
-    software_update_node.destroy_node()
-    rclpy.shutdown()
+def main(args=None):
+    try:
+        rclpy.init(args=args)
+        with SoftwareUpdateNode() as software_update_node:
+            executor = MultiThreadedExecutor()
+            rclpy.spin(software_update_node, executor)
+            software_update_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
 
 
 if __name__ == "__main__":
diff --git a/deepracer_systems_pkg/launch/deepracer_systems_pkg_launch.py b/deepracer_systems_pkg/launch/deepracer_systems_pkg_launch.py
index f9bb36a..bca495b 100644
--- a/deepracer_systems_pkg/launch/deepracer_systems_pkg_launch.py
+++ b/deepracer_systems_pkg/launch/deepracer_systems_pkg_launch.py
@@ -23,31 +23,6 @@ def generate_launch_description():
         Node(
             package='deepracer_systems_pkg',
             namespace='deepracer_systems_pkg',
-            executable='software_update_node',
-            name='software_update_node'
-        ),
-        Node(
-            package='deepracer_systems_pkg',
-            namespace='deepracer_systems_pkg',
-            executable='model_loader_node',
-            name='model_loader_node'
-        ),
-        Node(
-            package='deepracer_systems_pkg',
-            namespace='deepracer_systems_pkg',
-            executable='otg_control_node',
-            name='otg_control_node'
-        ),
-        Node(
-            package='deepracer_systems_pkg',
-            namespace='deepracer_systems_pkg',
-            executable='network_monitor_node',
-            name='network_monitor_node'
-        ),
-        Node(
-            package='deepracer_systems_pkg',
-            namespace='deepracer_systems_pkg',
-            executable='deepracer_systems_scripts_node',
-            name='deepracer_systems_scripts_node'
+            executable='systems_startup'
         )
     ])
diff --git a/deepracer_systems_pkg/setup.cfg b/deepracer_systems_pkg/setup.cfg
index 908ad0e..1c3089c 100644
--- a/deepracer_systems_pkg/setup.cfg
+++ b/deepracer_systems_pkg/setup.cfg
@@ -1,4 +1,4 @@
 [develop]
-script-dir=$base/lib/deepracer_systems_pkg
+script_dir=$base/lib/deepracer_systems_pkg
 [install]
-install-scripts=$base/lib/deepracer_systems_pkg
+install_scripts=$base/lib/deepracer_systems_pkg
diff --git a/deepracer_systems_pkg/setup.py b/deepracer_systems_pkg/setup.py
index 3730e82..4c26917 100644
--- a/deepracer_systems_pkg/setup.py
+++ b/deepracer_systems_pkg/setup.py
@@ -50,7 +50,8 @@ setup(
             'model_loader_node = deepracer_systems_pkg.model_loader_module.model_loader_node:main',
             'otg_control_node = deepracer_systems_pkg.otg_module.otg_control_node:main',
             'network_monitor_node = deepracer_systems_pkg.network_monitor_module.network_monitor_node:main',
-            'deepracer_systems_scripts_node = deepracer_systems_pkg.deepracer_systems_scripts_module.deepracer_systems_scripts_node:main'
+            'deepracer_systems_scripts_node = deepracer_systems_pkg.deepracer_systems_scripts_module.deepracer_systems_scripts_node:main',
+            'system_nodes = deepracer_systems_pkg.system_nodes:main'
         ],
     },
 )
